'use strict';

var _helpers = require('./helpers');

require('source-map-support').install();

describe('normal logger', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false);
    log.level = 'silly';
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg1');
    }).should['throw']('msg1');
    (function () {
      log.errorAndThrow(new Error('msg2'));
    }).should['throw']('msg2');
    (0, _helpers.assertOutputContains)(writers, 'msg1');
    (0, _helpers.assertOutputContains)(writers, 'msg2');
  });
});

describe('normal logger with prefix', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false, 'myprefix');
    log.level = 'silly';
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg');
    }).should['throw']('msg');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLW5vcm1hbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzt1QkFHcUMsV0FBVzs7QUFIaEQsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBS3hDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBTTtBQUM5QixNQUFJLE9BQU8sWUFBQTtNQUFFLEdBQUcsWUFBQSxDQUFDO0FBQ2pCLFFBQU0sQ0FBQyxZQUFNO0FBQ1gsV0FBTyxHQUFHLGFBTjZCLFlBQVksR0FNM0IsQ0FBQztBQUN6QixPQUFHLEdBQUcsYUFQRCxnQkFBZ0IsRUFPRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsT0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7R0FDckIsQ0FBQyxDQUFDOztBQUVILE9BQUssQ0FBQyxZQUFNO0FBQ1YsaUJBWnVCLGNBQWMsRUFZdEIsT0FBTyxDQUFDLENBQUM7R0FDekIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxrREFBa0QsRUFBRSxZQUFNO0FBQzNELE9BQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkIsaUJBaEJLLG9CQUFvQixFQWdCSixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsT0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2QixpQkFsQkssb0JBQW9CLEVBa0JKLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6QyxPQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLGlCQXBCSyxvQkFBb0IsRUFvQkosT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLE9BQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakIsaUJBdEJLLG9CQUFvQixFQXNCSixPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsT0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQixpQkF4Qkssb0JBQW9CLEVBd0JKLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxPQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pCLGlCQTFCSyxvQkFBb0IsRUEwQkosT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLE9BQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkIsaUJBNUJLLG9CQUFvQixFQTRCSixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDeEMsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHdFQUF3RSxFQUFFLFlBQU07QUFDakYsS0FBQyxZQUFNO0FBQUUsU0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1RCxLQUFDLFlBQU07QUFBRSxTQUFHLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FBRSxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkUsaUJBakNLLG9CQUFvQixFQWlDSixPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsaUJBbENLLG9CQUFvQixFQWtDSixPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDdkMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDOztBQUVILFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0FBQzFDLE1BQUksT0FBTyxZQUFBO01BQUUsR0FBRyxZQUFBLENBQUM7QUFDakIsUUFBTSxDQUFDLFlBQU07QUFDWCxXQUFPLEdBQUcsYUExQzZCLFlBQVksR0EwQzNCLENBQUM7QUFDekIsT0FBRyxHQUFHLGFBM0NELGdCQUFnQixFQTJDRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2pELE9BQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO0dBQ3JCLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUMsWUFBTTtBQUNWLGlCQWhEdUIsY0FBYyxFQWdEdEIsT0FBTyxDQUFDLENBQUM7R0FDekIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxrREFBa0QsRUFBRSxZQUFNO0FBQzNELE9BQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkIsaUJBcERLLG9CQUFvQixFQW9ESixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsaUJBckRLLG9CQUFvQixFQXFESixPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDMUMsT0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2QixpQkF2REssb0JBQW9CLEVBdURKLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6QyxpQkF4REssb0JBQW9CLEVBd0RKLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMxQyxPQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLGlCQTFESyxvQkFBb0IsRUEwREosT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLGlCQTNESyxvQkFBb0IsRUEyREosT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzFDLE9BQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakIsaUJBN0RLLG9CQUFvQixFQTZESixPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsaUJBOURLLG9CQUFvQixFQThESixPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDMUMsT0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQixpQkFoRUssb0JBQW9CLEVBZ0VKLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxpQkFqRUssb0JBQW9CLEVBaUVKLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMxQyxPQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pCLGlCQW5FSyxvQkFBb0IsRUFtRUosT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLGlCQXBFSyxvQkFBb0IsRUFvRUosT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzFDLE9BQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkIsaUJBdEVLLG9CQUFvQixFQXNFSixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsaUJBdkVLLG9CQUFvQixFQXVFSixPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDM0MsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHdFQUF3RSxFQUFFLFlBQU07QUFDakYsS0FBQyxZQUFNO0FBQUUsU0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxRCxpQkEzRUssb0JBQW9CLEVBMkVKLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QyxpQkE1RUssb0JBQW9CLEVBNEVKLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztHQUMzQyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9sb2dnZXItbm9ybWFsLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG5pbXBvcnQgeyBnZXREeW5hbWljTG9nZ2VyLCByZXN0b3JlV3JpdGVycywgc2V0dXBXcml0ZXJzLFxuICAgICAgICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5kZXNjcmliZSgnbm9ybWFsIGxvZ2dlcicsICgpID0+IHtcbiAgbGV0IHdyaXRlcnMsIGxvZztcbiAgYmVmb3JlKCgpID0+IHtcbiAgICB3cml0ZXJzID0gc2V0dXBXcml0ZXJzKCk7XG4gICAgbG9nID0gZ2V0RHluYW1pY0xvZ2dlcihmYWxzZSwgZmFsc2UpO1xuICAgIGxvZy5sZXZlbCA9ICdzaWxseSc7XG4gIH0pO1xuXG4gIGFmdGVyKCgpID0+IHtcbiAgICByZXN0b3JlV3JpdGVycyh3cml0ZXJzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgcmV3cml0ZSBsb2cgbGV2ZWxzIG91dHNpZGUgb2YgdGVzdGluZycsICgpID0+IHtcbiAgICBsb2cuc2lsbHkoJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ3NpbGx5Jyk7XG4gICAgbG9nLnZlcmJvc2UoJ3ZlcmJvc2UnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAndmVyYm9zZScpO1xuICAgIGxvZy52ZXJib3NlKCdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdkZWJ1ZycpO1xuICAgIGxvZy5pbmZvKCdpbmZvJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ2luZm8nKTtcbiAgICBsb2cuaHR0cCgnaHR0cCcpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdodHRwJyk7XG4gICAgbG9nLndhcm4oJ3dhcm4nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnd2FybicpO1xuICAgIGxvZy5lcnJvcignZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgfSk7XG4gIGl0KCd0aHJvdyBzaG91bGQgbm90IHJld3JpdGUgbG9nIGxldmVscyBvdXRzaWRlIG9mIHRlc3RpbmcgYW5kIHRocm93IGVycm9yJywgKCkgPT4ge1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KCdtc2cxJyk7IH0pLnNob3VsZC50aHJvdygnbXNnMScpO1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KG5ldyBFcnJvcignbXNnMicpKTsgfSkuc2hvdWxkLnRocm93KCdtc2cyJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ21zZzEnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXNnMicpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnbm9ybWFsIGxvZ2dlciB3aXRoIHByZWZpeCcsICgpID0+IHtcbiAgbGV0IHdyaXRlcnMsIGxvZztcbiAgYmVmb3JlKCgpID0+IHtcbiAgICB3cml0ZXJzID0gc2V0dXBXcml0ZXJzKCk7XG4gICAgbG9nID0gZ2V0RHluYW1pY0xvZ2dlcihmYWxzZSwgZmFsc2UsICdteXByZWZpeCcpO1xuICAgIGxvZy5sZXZlbCA9ICdzaWxseSc7XG4gIH0pO1xuXG4gIGFmdGVyKCgpID0+IHtcbiAgICByZXN0b3JlV3JpdGVycyh3cml0ZXJzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgcmV3cml0ZSBsb2cgbGV2ZWxzIG91dHNpZGUgb2YgdGVzdGluZycsICgpID0+IHtcbiAgICBsb2cuc2lsbHkoJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ215cHJlZml4Jyk7XG4gICAgbG9nLnZlcmJvc2UoJ3ZlcmJvc2UnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAndmVyYm9zZScpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy52ZXJib3NlKCdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy5pbmZvKCdpbmZvJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ2luZm8nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgICBsb2cuaHR0cCgnaHR0cCcpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdodHRwJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ215cHJlZml4Jyk7XG4gICAgbG9nLndhcm4oJ3dhcm4nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnd2FybicpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy5lcnJvcignZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgfSk7XG4gIGl0KCd0aHJvdyBzaG91bGQgbm90IHJld3JpdGUgbG9nIGxldmVscyBvdXRzaWRlIG9mIHRlc3RpbmcgYW5kIHRocm93IGVycm9yJywgKCkgPT4ge1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KCdtc2cnKTsgfSkuc2hvdWxkLnRocm93KCdtc2cnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgfSk7XG59KTtcbiJdfQ==
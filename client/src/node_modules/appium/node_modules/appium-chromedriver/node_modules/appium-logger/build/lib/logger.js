'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

exports.patchLogger = patchLogger;
exports.getLogger = getLogger;

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var npmLevels = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
var mockLog = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(npmLevels), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var l = _step.value;

    mockLog[l] = function () {};
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, { fg: 'blue', bg: 'black' }, 'dbug');
  }
}

function _getLogger() {
  var testingMode = parseInt(process.env._TESTING, 10) === 1;
  var forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  var usingGlobalLog = !!global._global_npmlog;
  var logger = testingMode && !forceLogMode ? mockLog : global._global_npmlog || _npmlog2['default'];
  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getLogger() {
  var prefix = arguments[0] === undefined ? null : arguments[0];

  var _getLogger2 = _getLogger();

  var _getLogger22 = _slicedToArray(_getLogger2, 2);

  var logger = _getLogger22[0];
  var usingGlobalLog = _getLogger22[1];

  var wrappedLogger = {};
  _Object$defineProperty(wrappedLogger, 'level', {
    get: function get() {
      return logger.level;
    },
    set: function set(newValue) {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(npmLevels), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var k = _step2.value;

      wrappedLogger[k] = logger[k].bind(logger, prefix);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  wrappedLogger.errorAndThrow = function (err) {
    if (!(err instanceof Error)) {
      err = new Error(err);
    }
    this.error(err);
    throw err;
  };
  if (!usingGlobalLog) {
    // if we're not using a global log specified from some top-level package,
    // set the log level to a default of verbose. Otherwise, let the top-level
    // package set the log level
    wrappedLogger.level = 'verbose';
  }
  return wrappedLogger;
}

var log = getLogger();

exports['default'] = log;
//# sourceMappingURL=data:application/json;base64,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Q0FBQzs7cUJBRVQsR0FBRyIsImZpbGUiOiJsaWIvbG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5wbWxvZyBmcm9tICducG1sb2cnO1xuXG5jb25zdCBucG1MZXZlbHMgPSBbJ3NpbGx5JywgJ3ZlcmJvc2UnLCAnZGVidWcnLCAnaW5mbycsICdodHRwJywgJ3dhcm4nLCAnZXJyb3InXTtcbmxldCBtb2NrTG9nID0ge307XG5mb3IgKGxldCBsIG9mIG5wbUxldmVscykge1xuICBtb2NrTG9nW2xdID0gKCkgPT4ge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaExvZ2dlcihsb2dnZXIpIHtcbiAgaWYgKCFsb2dnZXIuZGVidWcpIHtcbiAgICBsb2dnZXIuYWRkTGV2ZWwoJ2RlYnVnJywgMTAwMCwgeyBmZzogJ2JsdWUnLCBiZzogJ2JsYWNrJyB9LCAnZGJ1ZycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRMb2dnZXIgKCkge1xuICBjb25zdCB0ZXN0aW5nTW9kZSA9IHBhcnNlSW50KHByb2Nlc3MuZW52Ll9URVNUSU5HLCAxMCkgPT09IDE7XG4gIGNvbnN0IGZvcmNlTG9nTW9kZSA9IHBhcnNlSW50KHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTLCAxMCkgPT09IDE7XG4gIGNvbnN0IHVzaW5nR2xvYmFsTG9nID0gISFnbG9iYWwuX2dsb2JhbF9ucG1sb2c7XG4gIGxldCBsb2dnZXIgPSAodGVzdGluZ01vZGUgJiYgIWZvcmNlTG9nTW9kZSkgPyBtb2NrTG9nIDpcbiAgICAoZ2xvYmFsLl9nbG9iYWxfbnBtbG9nIHx8IG5wbWxvZyk7XG4gIHBhdGNoTG9nZ2VyKGxvZ2dlcik7XG4gIHJldHVybiBbbG9nZ2VyLCB1c2luZ0dsb2JhbExvZ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dnZXIocHJlZml4ID0gbnVsbCkge1xuICBsZXQgW2xvZ2dlciwgdXNpbmdHbG9iYWxMb2ddID0gX2dldExvZ2dlcigpO1xuICBsZXQgd3JhcHBlZExvZ2dlciA9IHt9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlZExvZ2dlciwgJ2xldmVsJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9nZ2VyLmxldmVsOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7IGxvZ2dlci5sZXZlbCA9IG5ld1ZhbHVlOyB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBmb3IobGV0IGsgb2YgbnBtTGV2ZWxzKSB7XG4gICAgd3JhcHBlZExvZ2dlcltrXSA9IGxvZ2dlcltrXS5iaW5kKGxvZ2dlciwgcHJlZml4KTtcbiAgfVxuICB3cmFwcGVkTG9nZ2VyLmVycm9yQW5kVGhyb3cgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgaWYgKCF1c2luZ0dsb2JhbExvZykge1xuICAgIC8vIGlmIHdlJ3JlIG5vdCB1c2luZyBhIGdsb2JhbCBsb2cgc3BlY2lmaWVkIGZyb20gc29tZSB0b3AtbGV2ZWwgcGFja2FnZSxcbiAgICAvLyBzZXQgdGhlIGxvZyBsZXZlbCB0byBhIGRlZmF1bHQgb2YgdmVyYm9zZS4gT3RoZXJ3aXNlLCBsZXQgdGhlIHRvcC1sZXZlbFxuICAgIC8vIHBhY2thZ2Ugc2V0IHRoZSBsb2cgbGV2ZWxcbiAgICB3cmFwcGVkTG9nZ2VyLmxldmVsID0gJ3ZlcmJvc2UnO1xuICB9XG4gIHJldHVybiB3cmFwcGVkTG9nZ2VyO1xufVxuXG5jb25zdCBsb2cgPSBnZXRMb2dnZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgbG9nO1xuIl19